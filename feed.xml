<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://shuvom-s.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://shuvom-s.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-13T05:05:42+00:00</updated><id>https://shuvom-s.github.io/feed.xml</id><title type="html">Shuvom Sadhuka</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Measuring Entropy</title><link href="https://shuvom-s.github.io/blog/2025/measuring-entropy/" rel="alternate" type="text/html" title="Measuring Entropy"/><published>2025-02-11T21:01:00+00:00</published><updated>2025-02-11T21:01:00+00:00</updated><id>https://shuvom-s.github.io/blog/2025/measuring-entropy</id><content type="html" xml:base="https://shuvom-s.github.io/blog/2025/measuring-entropy/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/entropy-480.webp 480w,/assets/img/entropy-800.webp 800w,/assets/img/entropy-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/entropy.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Is the entropy of generations from a large language model an overestimate or underestimate of the true entropy of human language? How would one even measure the entropy of human language? The question itself is poorly defined, but in this post I’ll try to tackle what it might mean to measure the entropy of a language.</p> <h2 id="a-basic-primer-on-entropy-and-previous-works">A Basic Primer on Entropy and Previous Works</h2> <p>To start, let’s recall the definition of entropy (for discrete variables):</p> \[H(X) = -\sum_{x \in A} p(x) \log_2 p(x)\] <p>Intuitively, entropy measures the amount of uncertainty present in a random variable $X$. The highest entropy distribution over $X$ would be the uniform distribution, and the lowest entropy would be a point mass (with 0 entropy, since $\log(1) = 0$).</p> <p>So if we want to measure the entropy of language, we’ll need to define two things: $A$, an alphabet we’ll measure over, and $p(x)$, a distribution over that alphabet. $A$ is fairly easy to define: the two natural approaches would be to let $A$ be characters (a, b, c, etc.) or words/tokens (the, ball, at, etc.). Let’s take $A$ to be words/tokens (like LLMs) for this post. The hard part is in estimating $p(x)$. We’ll call our estimate $q(x)$.</p> <p>Most naive approaches for measuring entropy of a language will likely overestimate the true entropy. For instance, one approach to estimate $p(x)$ would be to just use the empirical frequency of all words, but this would certainly overestimate entropy, because sentences are not constructed as sequences of random samples from the universe of words (e.g., “I is ball you” is not a valid sentence).</p> <p>A natural extension might be to consider 2-grams instead of 1-grams. Let’s measure the entropy of $p(x_1,x_0)$, for instance. This, too, will be an overestimate, because there are times when conditioning on the previous word is insufficient. For instance, every 2-gram in the sentence “I am red meat for you are here or there” is valid, but the sentence is nonsensical.</p> <p>In fact, the cross-entropy between any approximated model $q(x)$ like above and the true $p(x)$ will be an upper bound on the true entropy of $p(x)$. This is true mathematically because:</p> \[H(p,q) = H(p) + D_KL(p||q)\] <p>and KL divergence is non-negative. Cross entropy between $q(x)$ and $p(x)$ can be estimated empirically with text samples from a corpus (i.e., you get empirical samples from $p(x)$ and compare to your estimates $q(x)$).</p> <p>I’ve been slightly abusing notation here; technically the entropy we want to measure here is over a sequence, i.e. we want to measure</p> \[H(X) = -E_p \log P(x_0|x_{-1}, x_{-2}, …)\] <p>In other words, how much entropy is there in the distribution of the next word if I know all preceding words? These ideas and arguments have been thoroughly explored before, starting all the way from Claude Shannon himself in 1950 (shortly after he defined entropy in an earlier paper). I’d encourage you to read <a href="https://www.princeton.edu/~wbialek/rome/refs/shannon_51.pdf">his paper</a> — it’s not very long and full of interesting insights.</p> <p>The key insight is that if we let $F_n = H_n - H_{n-1}$, i.e. the conditional entropy of the n-gram model given the (n-1)-gram model, then we get that $H(X) = \lim_{n \rightarrow \infty} F_n$. In practice, of course, there are no $\inf$-grams, so Shannon calculates $F_n$ for small $n$ and tries to extrapolate the curve to predict the limit. Nowadays, we can probably easily compute 7-, 8-, and 9-grams on a standard laptop using a large corpus of text, which could give us a better sense of this limit. This also relates to a more general theorem known as the Shannon-McMillan-Breiman theorem, which states that for discrete-time finite-valued (both true here) stochastic processes:</p> \[H(X) \overset{p}{=} \lim_{n \rightarrow \infty} -\frac{1}{n} p(x_1, …, x_n)\] <p>There’s a catch to the theorem above that is worth noting. The theorem only holds for stationary ergodic processes (i.e., there exists a stationary distribution), but it’s clear that English (or more generally any language) is constantly evolving, as new words are added, old words become obsolete, and writing styles evolve.</p> <h2 id="a-thorny-qualm">A Thorny Qualm</h2> <p>The above approximation is neat but something still feels wrong to me. In some sense, the entropy of English is lower bounded by the number of plausible ideas there are in the world. That is, there are two layers in language, each of which has its own entropy:</p> <ol> <li> <p>The generation of ideas in our heads, which we can denote $p(\text{idea})$. Different people think about different ideas, so there’s significant heterogeneity across our population in $p(\text{idea})$.</p> </li> <li> <p>Expressing in words the abstract idea we’ve generated, which we can denote $p(x|\text{idea})$.</p> </li> </ol> <p>This might seem like a triviality, but I’d argue it’s important to break this down. The entropy of ideas is (probably) invariant across languages. Thus, the real quantity of interest (to me) is (2) — how much entropy is there in the valid ways to express an idea. Combining (1) and (2) into one step and just measuring entropy of expressed sentences (as Shannon did) risks two issues:</p> <ol> <li> <p>Certain languages have become the <em>lingua franca</em> of specific professions. For instance, one may accidentally observe more entropy in English than in Swahili, Italian, or Hindi, simply because English is the international language of scientific research, which is in the business of generating new ideas and hypotheses (hence likely higher entropy).</p> </li> <li> <p>The translation between ideas and expressions in (2) is imperfect. Anyone who is a bilingual speaker is likely to be familiar with this. For instance, I often find it more difficult to express complex thoughts in Bengali (the language I speak with some family) than English (my native language).</p> </li> </ol> <p>Measuring $p(x|\text{idea})$ is hard, though, because there’s no clean notion of what an “idea” is. We can also argue about the correct resolution of an idea. For instance, are the sentences <em>I am eating the sandwich</em>, <em>I am devouring the sandwich</em>, and <em>I am nibbling on the sandwich</em> all expressing the same idea? It depends on what resolution you’re looking at. All these sentences express some form of consuming a sandwich, but they differ in how vigorously that consumption is happening.</p> <p>The space of ideas is (probably) continuous, but to make progress we need some way of mapping out that space. I had this conversation with a couple friends last year — how can we create an embedding space for ideas? I’m not sure, but I think people are approaching aspects of this question in the LLM world.</p> <p>Let’s imagine we have a perfect idea embedding model. To measure entropy of $p(x|\text{idea})$, we could cluster (i.e., discretize) the space of ideas at some resolution and then measure $p(x|\text{idea})$, perhaps using some of the techniques above. There’s still a question of how to measure $p(x|\text{idea})$. One way might be to use a generative language model, by using some kind of decoder on the idea embeddings. This is not that far off; we can already measure the entropy of $p(x|\text{prompt})$ in most language models, many of which are decoder-only.</p> <p>But $p(x|\text{idea})$ as measured by the outputs of some decoder is probably going to be an underestimate of the true entropy. There are a couple reasons for this:</p> <ol> <li> <p>Most language models are designed to be safe (i.e., outputs are not toxic, false, etc.), which necessarily constrains the output space of the approximation $q(x|\text{idea})$ to be more concentrated than the true $p(x|\text{idea})$. However, people often do express themselves in unsavory ways like swearing or being impolite that are still valid expressions of their ideas. To be clear, I am not advocating for unsafe language models, I’m just noting that LLM safety likely lowers the output entropy.</p> </li> <li> <p>Language models probably interpolate and average the training data in some way, so wildly outlier $p(x|\text{idea})$ are unlikely to appear. I’m not sure increasing the sampling temperature would help significantly, though I’d be happy to see what results people have in this direction.</p> </li> </ol> <h2 id="final-remarks-and-connections-to-other-domains">Final Remarks and Connections to Other Domains</h2> <p>I’ve thought of variants of the above questions in human genetics as well. If we wanted to estimate the entropy of the human genome, a naive lower bound would be something like $\log_2(\text{total humans who have ever lived})$ and a naive upper bound would be $\log_2(4^{3 \text{billion}})$ since there are 3 billion base pairs in the human genome.</p> <p>Both of these numbers are wildly off, though. The lower bound is clearly off because it changes every time someone is born (and it’ll be a long, long time before we observe two people with identical genomes). The upper bound is off because most genes are under heavy evolutionary pressure, and a small string of mutations would kill the person.</p> <p>Genomes come with the additional twist that unlike English, the N-gram model would need to have an enormously long context to begin to understand the scaling of entropy as a function of $N$. Still, though, I think it could be useful to look at the entropy of 1- to 10-grams in DNA sequences (or similar) and see what the trend looks like. Perhaps a future post.</p> <p>Lastly, I want to note that I think the ideas point might have more salience. For instance, language models are often measured by their perplexities, with low perplexity indicating better performance. However, it’s unclear to me if higher perplexity is bad if the high perplexity comes from different generations that are semantically equivalent, even if the words are different (e.g., <em>The President of the United States is Donald Trump</em> and <em>Trump is the American president</em>).</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="statistics"/><category term="language-models"/><category term="entropy"/><category term="genomics"/><summary type="html"><![CDATA[How would we measure the entropy of natural language?]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://shuvom-s.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://shuvom-s.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://shuvom-s.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://shuvom-s.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://shuvom-s.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://shuvom-s.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>